import re
import random
import string
from typing import Optional, Set, List

# Список стоп-слов по умолчанию для русского и английского языков
# Этот список можно расширить или загружать из внешнего файла/библиотеки
DEFAULT_STOPWORDS = {
    'а', 'без', 'более', 'бы', 'был', 'была', 'были', 'было', 'быть', 'в', 'вам', 'вас', 'весь', 'во', 'вот', 'все',
    'всего', 'всегда', 'всю', 'вы', 'где', 'да', 'даже', 'для', 'до', 'другой', 'его', 'ее', 'если', 'есть', 'еще',
    'же', 'за', 'зачем', 'здесь', 'и', 'из', 'или', 'им', 'их', 'к', 'как', 'когда', 'ком', 'кого', 'конечно', 'кто',
    'куда', 'ли', 'либо', 'мне', 'может', 'мы', 'на', 'надо', 'наконец', 'него', 'нее', 'нет', 'ни', 'них', 'но', 'ну',
    'о', 'об', 'один', 'он', 'она', 'они', 'опять', 'от', 'перед', 'по', 'под', 'после', 'потом', 'потому', 'почти',
    'при', 'про', 'раз', 'рядом', 'с', 'сам', 'свой', 'себе', 'со', 'совсем', 'так', 'также', 'такой', 'там', 'тебя',
    'тем', 'теперь', 'то', 'тогда', 'того', 'тоже', 'только', 'тот', 'три', 'тут', 'ты', 'у', 'уже', 'хоть', 'чего',
    'человек', 'чем', 'что', 'чтобы', 'чуть', 'эти', 'этого', 'этой', 'этом', 'этот', 'эту', 'я',
    'a', 'an', 'and', 'are', 'as', 'at', 'be', 'by', 'for', 'from', 'has', 'he', 'hi', 'his', 'how', 'i', 'if', 'in',
    'is', 'it', 'its', 'just', 'me', 'my', 'no', 'not', 'of', 'on', 'or', 'so', 'that', 'the', 'their', 'them', 'then',
    'there', 'these', 'they', 'this', 'to', 'us', 'was', 'we', 'what', 'when', 'where', 'which', 'who', 'why', 'with',
    'you', 'your'
}


def clean_text(text: str) -> str:
    """
    Очищает текст от всех символов, кроме букв, цифр и пробелов,
    и заменяет множественные пробелы на одиночные.

    Args:
        text: Входная строка.

    Returns:
        Очищенная и нормализованная строка.
    """
    # Удаляем все, что не является буквой, цифрой или пробелом
    text = re.sub(r"[^\w\s]", "", text)
    # Заменяем все последовательности пробелов на один пробел
    text = re.sub(r"\s+", " ", text)
    return text.strip()


def generate_random_id(length: int = 8) -> str:
    """
    Генерирует случайную строку заданной длины, состоящую из букв и цифр.

    Args:
        length: Желаемая длина ID.

    Returns:
        Случайная строка.
    """
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))


def is_valid_query(query: str) -> bool:
    """
    Простая проверка на валидность запроса: проверяет, что строка не пуста
    и содержит хотя бы один непустой символ после очистки пробелов.
    Эта функция предназначена для очень базовой проверки; для более сложных
    сценариев валидации используйте QueryValidator.

    Args:
        query: Строка запроса пользователя.

    Returns:
        True, если запрос валиден, иначе False.
    """
    return bool(query and query.strip())


def truncate_text_by_words(text: str, max_words: int = 100) -> str:
    """
    Урезает текст до заданного количества слов.

    Args:
        text: Исходный текст.
        max_words: Максимальное количество слов в выходном тексте.

    Returns:
        Урезанный текст.
    """
    tokens = text.split()
    return ' '.join(tokens[:max_words])


def normalize_whitespace(text: str) -> str:
    """
    Убирает повторяющиеся пробелы и приводит строку к нормальной форме,
    удаляя пробелы в начале и конце.

    Args:
        text: Входная строка.

    Returns:
        Строка с нормализованными пробелами.
    """
    return ' '.join(text.strip().split())


def remove_stopwords(text: str, stopwords: Optional[Set[str]] = None) -> str:
    """
    Удаляет стоп-слова из текста. Если список стоп-слов не предоставлен,
    используется список DEFAULT_STOPWORDS.

    Args:
        text: Входной текст.
        stopwords: Опциональный набор стоп-слов для удаления.

    Returns:
        Текст без стоп-слов.
    """
    if stopwords is None:
        stopwords = DEFAULT_STOPWORDS

    # Разделяем текст на слова, приводим к нижнему регистру и отфильтровываем стоп-слова
    filtered_words = [word for word in text.split() if word.lower() not in stopwords]
    return ' '.join(filtered_words)