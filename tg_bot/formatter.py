from typing import List, Dict, Any
from core.logger import get_logger

logger = get_logger("formatter")


def _truncate_text(text: str, max_length: int = 700, suffix: str = "...") -> str:
    """
    –£—Å–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã, –¥–æ–±–∞–≤–ª—è—è —Å—É—Ñ—Ñ–∏–∫—Å, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –±—ã–ª —É—Å–µ—á–µ–Ω.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç, —á—Ç–æ Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–º–≤–æ–ª—ã, –ø–æ—ç—Ç–æ–º—É max_length
    –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ–Ω—å—à–µ 1024 (–æ–±—â–µ–≥–æ –ª–∏–º–∏—Ç–∞ caption).
    """
    if not isinstance(text, str):
        return ""
    if len(text) <= max_length:
        return text

    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–µ–∑–∞—Ç—å –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø–æ–ª–Ω–æ–º—É —Å–ª–æ–≤—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–±—Ä–µ–∑–∫–∏ –ø–æ—Å—Ä–µ–¥–∏ —Å–ª–æ–≤–∞
    truncated = text[:max_length]
    last_space = truncated.rfind(' ')
    if last_space != -1:
        return truncated[:last_space] + suffix
    return truncated + suffix


def format_movie(movie: Dict[str, Any]) -> str:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ñ–∏–ª—å–º–µ –≤ —á–∏—Ç–∞–µ–º—ã–π Markdown-—Ç–µ–∫—Å—Ç –¥–ª—è Telegram.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è movie –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Ö.
    """
    title = movie.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    # –£—Å–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–∏ Telegram
    overview = _truncate_text(movie.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."))

    rating = f"{movie.get('vote_average', 0):.1f}" if movie.get('vote_average') is not None else "‚Äì"

    release_date_full = movie.get("release_date", "")
    release_year = release_date_full.split('-')[0] if release_date_full and len(release_date_full) >= 4 else "‚Äì"

    genres = ", ".join(movie.get("genres", [])) if isinstance(movie.get("genres"), list) else movie.get("genres", "‚Äì")

    runtime_val = movie.get("runtime")
    runtime = f"{runtime_val} –º–∏–Ω" if isinstance(runtime_val, (int, float)) else "‚Äì"

    directors = ", ".join([d['name'] for d in movie.get("directors", [])]) if isinstance(movie.get("directors"),
                                                                                         list) and movie.get(
        "directors") else "‚Äì"
    actors = ", ".join([a['name'] for a in movie.get("actors", [])]) if isinstance(movie.get("actors"),
                                                                                   list) and movie.get(
        "actors") else "‚Äì"

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ Telegram (MarkdownV2)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º os.linesep –¥–ª—è –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç–∏, –Ω–æ Telegram –æ–±—ã—á–Ω–æ –ø–æ–Ω–∏–º–∞–µ—Ç \n
    lines = [
        f"üé¨ *{title}* ({release_year})",
        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: `{rating}/10`",
        f"üé≠ –ñ–∞–Ω—Ä—ã: {genres}",
        f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {runtime}",
        f"üë®‚Äç directorial: {directors}",
        f"üë• –í —Ä–æ–ª—è—Ö: {actors}",
        f"",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {overview}"
    ]

    formatted_text = "\n".join(lines)
    logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –¥–µ—Ç–∞–ª–∏ —Ñ–∏–ª—å–º–∞ –¥–ª—è Telegram: {title}")
    return formatted_text


def format_movies_list(movies: List[Dict[str, Any]]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –≤ –∫—Ä–∞—Ç–∫–æ–º –≤–∏–¥–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ —Ç–æ–ø–æ–≤)
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Markdown.

    Args:
        movies: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ñ–∏–ª—å–º–∞—Ö.

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ Telegram.
    """
    if not movies:
        return "–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç."

    lines = []
    for idx, movie in enumerate(movies, 1):
        title = movie.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        rating = f"{movie.get('vote_average', 0):.1f}" if movie.get('vote_average') is not None else "‚Äì"
        release_date_full = movie.get("release_date", "")
        release_year = release_date_full.split('-')[0] if release_date_full and len(release_date_full) >= 4 else "‚Äì"

        lines.append(f"{idx}. *{title}* ‚Äî {release_year}, ‚≠ê {rating}/10")
    logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è Telegram: {len(movies)} —à—Ç.")
    return "\n".join(lines)


def format_llm_response(response: str) -> str:
    """
    –î–µ–ª–∞–µ—Ç LLM-–æ—Ç–≤–µ—Ç –ø—Ä–∏–≥–æ–¥–Ω—ã–º –¥–ª—è Telegram, –¥–æ–±–∞–≤–ª—è—è –≤–≤–æ–¥–Ω—É—é —Ñ—Ä–∞–∑—É –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.

    Args:
        response: –°—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM.

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å Markdown.
    """
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º Markdown
    formatted_response = f"üì¢ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å:*\n\n{response.strip()}"
    logger.info("–û—Ç–≤–µ—Ç LLM –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω.")
    return formatted_response


def format_error(message: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: *{message}*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
