# tg_bot/handlers.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from core.logger import get_logger
from tg_bot.keyboards import get_start_keyboard, get_post_action_keyboard, get_confirmation_keyboard
from tg_bot.formatter import format_movies_list, format_error, format_movie
from database.movies import MovieDatabase
from core.engine import RecommendationEngine
from agents.validator import QueryValidator
from agents.feedback import FeedbackAgent
from datetime import datetime

logger = get_logger("handlers")

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è ConversationHandler'–æ–≤ (–∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∏–∑ main –∏–ª–∏ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è)
RECOMMENDATION = 0
RATING_SELECT_MOVIE = 1
RATING_GET_SCORE = 2
FEEDBACK_COLLECTING = 3


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
def get_message_object(update: Update):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Message –¥–ª—è –æ—Ç–≤–µ—Ç–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –ø—Ä–∏—à–ª–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Message –∏–ª–∏ CallbackQuery.
    """
    if update.message:
        return update.message
    if update.callback_query and update.callback_query.message:
        return update.callback_query.message
    return None


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = update.effective_user.id
    username = update.effective_user.username or str(user_id)
    db: MovieDatabase = context.bot_data.get('db')
    if db:
        db.add_user(user_id, username)
    else:
        logger.error("MovieDatabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ context.bot_data –ø—Ä–∏ /start.")

    target_message = get_message_object(update)
    if target_message:
        await target_message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ —Ñ–∏–ª—å–º üé¨\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å. "
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ –ø—Ä–æ –∫–æ—Å–º–æ—Å', '–∫–æ–º–µ–¥–∏—è –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏', '—á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ –ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä–∞'.",
            reply_markup=get_post_action_keyboard()
        )
    return RECOMMENDATION


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = (
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/recommend - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Ñ–∏–ª—å–º–∞ (–ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å)\n"
        "/rate - –û—Ü–µ–Ω–∏—Ç—å —Ñ–∏–ª—å–º\n"
        "/feedback - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞\n"
        "/history - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –æ—Ü–µ–Ω–æ–∫\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∞ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–∏–ª—å–º—ã üé•"
    )
    target_message = get_message_object(update)
    if target_message:
        await target_message.reply_text(help_text, reply_markup=get_post_action_keyboard())


async def recommend_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recommend, –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é."""
    target_message = get_message_object(update)
    if target_message:
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.edit_text(
                "–û—Ç–ª–∏—á–Ω–æ! –û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —Ñ–∏–ª—å–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ –ø—Ä–æ –∫–æ—Å–º–æ—Å', '–∫–æ–º–µ–¥–∏—è –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏', '—á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ –ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä–∞'.",
                reply_markup=get_post_action_keyboard()
            )
        else:
            await update.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ! –û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —Ñ–∏–ª—å–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ –ø—Ä–æ –∫–æ—Å–º–æ—Å', '–∫–æ–º–µ–¥–∏—è –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏', '—á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ –ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä–∞'.",
                reply_markup=get_post_action_keyboard()
            )
    return RECOMMENDATION


async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤—ã–∑—ã–≤–∞–µ—Ç RecommendationEngine.
    """
    user_id = update.effective_user.id
    user_query = update.message.text.strip()

    logger.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_query}")

    engine: RecommendationEngine = context.bot_data.get("recommendation_engine")
    query_validator: QueryValidator = context.bot_data.get("query_validator")
    db: MovieDatabase = context.bot_data.get("db")

    if not engine or not query_validator or not db:
        logger.error("–û–¥–∏–Ω –∏–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ context.bot_data.")
        await update.message.reply_text(format_error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."),
                                        reply_markup=get_post_action_keyboard())
        return RECOMMENDATION

    is_valid, reason = query_validator.validate_or_explain(user_query)
    if not is_valid:
        await update.message.reply_text(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, {reason}", reply_markup=get_post_action_keyboard())
        return RECOMMENDATION

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –±—É–¥—É—â–∏—Ö "–ï—â—ë —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
    context.user_data['last_user_query'] = user_query

    await update.message.chat.send_action(action="typing")
    await update.message.reply_text("üîç –ò—â—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")

    try:
        result = await engine.generate_recommendations(user_query, user_id)

        if 'error' in result:
            await update.message.reply_text(format_error(result['error']), reply_markup=get_post_action_keyboard())
        elif result.get("recommendations"):
            response_text = result.get('llm_response', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.')
            recommended_movies = result.get('recommendations', [])

            await update.message.reply_text(response_text, parse_mode='Markdown')

            context.user_data['last_recommendations'] = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö
            for movie in recommended_movies:
                movie_title = movie.get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                release_date = movie.get('release_date', 'N/A')
                poster_url = movie.get('poster_url', '')

                year_only = release_date.split('-')[0] if release_date and len(release_date) >= 4 else 'N/A'
                caption = f"üé¨ **{movie_title}** ({year_only})"

                movie_db_id = db.get_movie_id_by_tmdb_id(movie.get('tmdb_id'))
                if movie_db_id:
                    context.user_data['last_recommendations'].append({
                        'title': movie_title,
                        'tmdb_id': movie.get('tmdb_id'),
                        'db_id': movie_db_id
                    })

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è —Å —Ñ–∏–ª—å–º–æ–º
                movie_action_buttons = [
                    InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å", callback_data=f"select_movie_for_rating_{movie_db_id}"),
                    InlineKeyboardButton("‚ù§Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save:{movie_db_id}"),
                ]

                # –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏" –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                details_button = InlineKeyboardButton("‚û°Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏", callback_data=f"details:{movie_db_id}")

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –∫–Ω–æ–ø–æ–∫ "–ü—Ä–µ–¥—ã–¥—É—â–∏–π/–°–ª–µ–¥—É—é—â–∏–π"
                keyboard_rows = [movie_action_buttons, [details_button]]
                reply_markup = InlineKeyboardMarkup(keyboard_rows)

                if poster_url:
                    try:
                        await update.message.reply_photo(
                            photo=poster_url,
                            caption=caption,
                            parse_mode='Markdown',
                            reply_markup=reply_markup
                        )
                    except Exception as photo_e:
                        logger.error(f"Failed to send photo for {movie_title}: {photo_e}")
                        await update.message.reply_text(f"{caption}\n(–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç–µ—Ä)",
                                                        parse_mode='Markdown', reply_markup=reply_markup)
                else:
                    await update.message.reply_text(caption, parse_mode='Markdown', reply_markup=reply_markup)

            await update.message.reply_text("–ß—Ç–æ –µ—â—ë –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=get_post_action_keyboard())

        else:
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–∏–ª—å–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.",
                reply_markup=get_post_action_keyboard()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_post_action_keyboard())

    return RECOMMENDATION


async def rate_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rate, –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ü–µ–Ω–∫–∏."""
    logger.debug(
        f"Entering rate_command. Update type: {type(update)}, Message: {update.message}, Callback: {update.callback_query}")

    user_id = update.effective_user.id
    db: MovieDatabase = context.bot_data.get('db')
    if not db:
        logger.error("MovieDatabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ context.bot_data –ø—Ä–∏ /rate.")
        target_message = get_message_object(update)
        if target_message:
            await target_message.reply_text(
                format_error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."),
                reply_markup=get_post_action_keyboard())
        return RECOMMENDATION

    user_history = db.get_user_history(user_id)
    user_ratings = db.get_user_ratings(user_id)
    rated_movie_ids = {r['movie_id'] for r in user_ratings}

    potential_movies_to_rate = []
    seen_db_ids = set()

    for record in user_history:
        movie_db_id = record.get('movie_id')
        if movie_db_id and movie_db_id not in rated_movie_ids and movie_db_id not in seen_db_ids:
            movie_details = db.get_movie(movie_db_id)
            if movie_details:
                potential_movies_to_rate.append({
                    'db_id': movie_db_id,
                    'title': movie_details.get('title')
                })
                seen_db_ids.add(movie_db_id)

    if not potential_movies_to_rate:
        target_message = get_message_object(update)
        if target_message:
            await target_message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Ñ–∏–ª—å–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å. "
                                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é.",
                                            reply_markup=get_post_action_keyboard())
        return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º ConversationHandler, –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤

    keyboard_buttons = []
    for movie in potential_movies_to_rate:
        keyboard_buttons.append(
            [InlineKeyboardButton(movie['title'], callback_data=f"select_movie_for_rating_{movie['db_id']}")])

    reply_markup = InlineKeyboardMarkup(keyboard_buttons)

    target_message = get_message_object(update)
    if target_message:
        if update.callback_query:
            await update.callback_query.answer()
            try:
                # –ï—Å–ª–∏ —ç—Ç–æ callback –æ—Ç inline-–∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ post_action_keyboard)
                await update.callback_query.message.edit_text("–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å?",
                                                              reply_markup=reply_markup)
            except Exception as e:
                logger.warning(f"Failed to edit message in rate_command from callback: {e}. Sending new message.")
                await target_message.reply_text("–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å?", reply_markup=reply_markup)
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /rate
            await update.message.reply_text("–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å?", reply_markup=reply_markup)
    return RATING_SELECT_MOVIE


async def feedback_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /feedback, –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."""
    logger.debug(
        f"Entering feedback_command. Update type: {type(update)}, Message: {update.message}, Callback: {update.callback_query}")

    target_message = get_message_object(update)
    if target_message:
        if update.callback_query:
            await update.callback_query.answer()
            try:
                # –ï—Å–ª–∏ —ç—Ç–æ callback –æ—Ç inline-–∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ post_action_keyboard)
                await update.callback_query.message.edit_text(
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–º–æ—á—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞."
                    "–Ø —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω–æ.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]])
                )
            except Exception as e:
                logger.warning(f"Failed to edit message in feedback_command from callback: {e}. Sending new message.")
                await target_message.reply_text(
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–º–æ—á—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞."
                    "–Ø —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω–æ.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]])
                )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /feedback
            await update.message.reply_text(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –ø–æ–º–æ—á—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞."
                "–Ø —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω–æ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")]])
            )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –æ—Ç–∑—ã–≤—É
    context.user_data['last_user_query_for_feedback'] = update.message.text if update.message else "N/A (from callback)"
    return FEEDBACK_COLLECTING


async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history."""
    user_id = update.effective_user.id
    db: MovieDatabase = context.bot_data.get('db')
    if not db:
        logger.error("MovieDatabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ context.bot_data –ø—Ä–∏ /history.")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º update.effective_chat.send_message, —Ç–∞–∫ –∫–∞–∫ update.message –º–æ–∂–µ—Ç –±—ã—Ç—å None
        await context.bot.send_message(chat_id=user_id, text=format_error(
            "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."), reply_markup=get_post_action_keyboard())
        return

    history_records = db.get_user_history(user_id)

    if not history_records:
        await context.bot.send_message(chat_id=user_id, text="–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –ø—É—Å—Ç–∞.",
                                       reply_markup=get_post_action_keyboard())
        return

    history_text = "–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è:\n"
    for record in history_records:
        movie_details = db.get_movie(record['movie_id'])
        movie_title = movie_details.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª—å–º') if movie_details else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª—å–º'
        action = record['action_type']
        try:
            timestamp_dt = datetime.fromisoformat(str(record['timestamp']))
            timestamp_formatted = timestamp_dt.strftime('%d.%m.%Y %H:%M')
        except ValueError:
            timestamp_formatted = str(record['timestamp'])
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç timestamp –≤ –∏—Å—Ç–æ—Ä–∏–∏: {record['timestamp']}")

        history_text += f"- **¬´{movie_title}¬ª** ({action}) –æ—Ç {timestamp_formatted}\n"

    await context.bot.send_message(chat_id=user_id, text=history_text, parse_mode='Markdown',
                                   reply_markup=get_post_action_keyboard())


async def view_saved_movies_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤."""
    user_id = update.effective_user.id
    db: MovieDatabase = context.bot_data.get('db')
    if not db:
        logger.error("MovieDatabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ context.bot_data –ø—Ä–∏ view_saved_movies_command.")
        await context.bot.send_message(chat_id=user_id, text=format_error(
            "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."), reply_markup=get_post_action_keyboard())
        return

    saved_movies_records = db.get_user_history(user_id, action_type='saved')

    if not saved_movies_records:
        await context.bot.send_message(chat_id=user_id, text="–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤.",
                                       reply_markup=get_post_action_keyboard())
        return

    saved_movies_details = []
    for record in saved_movies_records:
        movie = db.get_movie(record['movie_id'])
        if movie:
            saved_movies_details.append(movie)

    if not saved_movies_details:
        await context.bot.send_message(chat_id=user_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤.",
                                       reply_markup=get_post_action_keyboard())
        return

    saved_movies_titles = [
        f"**{format_movie_title_for_display(m.get('title'))}** ({m.get('release_date', '')[:4] or 'N/A'})" for m in
        saved_movies_details]
    llm_prompt = (
        f"–£ –≤–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã: {', '.join(saved_movies_titles)}. "
        f"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–µ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤. "
        f"–£–ø–æ–º–∏–Ω–∞–π —Ç–æ–ª—å–∫–æ —ç—Ç–∏ —Ñ–∏–ª—å–º—ã, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π, —Å—Ä–∞–∑—É –∫ –¥–µ–ª—É."
    )
    llm_generator = context.bot_data.get('llm_generator')
    llm_response = await llm_generator.generate(prompt=llm_prompt,
                                                system_prompt="–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Ñ–∏–ª—å–º–∞–º. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–∞—Ö.")

    await context.bot.send_message(chat_id=user_id, text=llm_response, parse_mode='Markdown')

    for movie in saved_movies_details:
        movie_title = movie.get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        release_date = movie.get('release_date', 'N/A')
        poster_url = movie.get('poster_url', '')

        year_only = release_date.split('-')[0] if release_date and len(release_date) >= 4 else 'N/A'
        caption = f"üé¨ **{movie_title}** ({year_only})"

        movie_db_id = movie.get('id')

        if poster_url:
            try:
                await context.bot.send_photo(
                    chat_id=user_id,
                    photo=poster_url,
                    caption=caption,
                    parse_mode='Markdown',
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å", callback_data=f"select_movie_for_rating_{movie_db_id}")],
                        [InlineKeyboardButton("‚û°Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏", callback_data=f"details:{movie_db_id}")]
                    ])
                )
            except Exception as photo_e:
                logger.error(f"Failed to send photo for {movie_title}: {photo_e}")
                await context.bot.send_message(chat_id=user_id, text=f"{caption}\n(–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç–µ—Ä)",
                                               parse_mode='Markdown')
        else:
            await context.bot.send_message(chat_id=user_id, text=caption, parse_mode='Markdown',
                                           reply_markup=InlineKeyboardMarkup([
                                               [InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å",
                                                                     callback_data=f"select_movie_for_rating_{movie_db_id}")],
                                               [InlineKeyboardButton("‚û°Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏",
                                                                     callback_data=f"details:{movie_db_id}")]
                                           ]))
    await context.bot.send_message(chat_id=user_id, text="–ß—Ç–æ –µ—â—ë –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                                   reply_markup=get_post_action_keyboard())


def format_movie_title_for_display(title: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, —É–¥–∞–ª—è—è —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å Markdown.
    """
    return title.replace('*', '').replace('_', '').replace('`', '')

